module eth_enc28j60_utils

' ************************************************************
' * ROM constant strings
' *
' ************************************************************

include "eth_enc28j60_api"
dim    getRequest  as byte[15]   ' HTTP request buffer
       dyna        as byte[30]   ' buffer for dynamic response
       httpCounter as word       ' counter of HTTP requests
       txt         as string[11]
dim    dato        as byte[256]
dim    dato_temp   as byte[256]
dim    dato_recibido,cabecera as byte
dim    cant_datos ,long_high, long_low ,j as  word

'{*******************************************
' * user defined functions
' *}

'//-------------- Returns true if the given character is a cipher (digit)
sub function isdigit(dim character as byte) as byte
  result = (character <= "9") and (character >= "0")
end sub

'{*
' * this function is called by the library
' * the user accesses to the HTTP request by successive calls to Spi_Ethernet_getByte()
' * the user puts data in the transmit buffer by successive calls to Spi_Ethernet_putByte()
' * the function must return the length in bytes of the HTTP reply, or 0 if nothing to transmit
' *
' * if you don't need to reply to HTTP requests,
' * just define this function with a return(0) as single statement
' *
' *}
sub function Spi_Ethernet_UserTCP(dim byref remoteHost as byte[4],
                              dim remotePort, localPort, reqLength as word) as word
dim i as byte

                 cant_datos=0
                 result=0
                 i=0
                 
'                 get 10 first bytes only of the request, the rest does not matter here
                 for i = 0 to reqLength-1
                   dato[cant_datos] = Spi_Ethernet_getByte()
                   inc(cant_datos)
                 next i

                 dato[cant_datos] = 0

                 'result = result + Spi_Ethernet_putString(@dato)
                 dato_recibido=1


                 ' return to the library with the number of bytes to transmit
end sub

'{*
' * this function is called by the library
' * the user accesses to the UDP request by successive calls to Spi_Ethernet_getByte()
' * the user puts data in the transmit buffer by successive calls to Spi_Ethernet_putByte()
' * the function must return the length in bytes of the UDP reply, or 0 if nothing to transmit
' *
' * if you don't need to reply to UDP requests,
' * just define this function with a return(0) as single statement
' *
' *}
sub function Spi_Ethernet_UserUDP(dim byref remoteHost as byte[4],
                              dim remotePort, destPort, reqLength as word) as word
dim i as byte
      result = 0
      cant_datos=0
      
     '' if(destPort=5100)then

       result = result + reqLength

       for i = 0 to reqLength-1
       dato[cant_datos]= Spi_Ethernet_getByte()
       inc(cant_datos)
       next i

      dato[cant_datos] = 0
      dato_recibido=1
     '' end if



  end sub

end.

